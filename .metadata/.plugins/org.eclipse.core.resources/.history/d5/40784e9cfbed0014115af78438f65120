#include "RPSS_System.h"

void init_uart(void){
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 9600,
        (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));

}

RPSS_States update_peripheral_controller(RPSS_States state){
	switch(state){
		case DEFAULT:
			break;
		case IN_DATABASE:
			break;
		case NOT_IN_DATABASE:
			break;
		case REGISTER:
			break;
		case CHECK_BREATHALZYER:
			break;
		case BREATHALYZER_PASS:
			break;
		case BREATHALYZER_FAIL:
			break;
		case DEFAULT:
			break;
		case MAINTENANCE:
			break;
		default:
			break;
	}

	return state;
}

char uart_transceive(char c){
	UARTCharPut(GPIO_PORTA_BASE, c);

	while(!UARTCharsAvail(GPIO_PORTA_BASE));

	c = UARTCharGet(GPIO_PORTA_BASE);

	return c;
}
